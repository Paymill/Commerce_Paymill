<?php

/**
 * @file
 * Provides a basic payment module implementation for Paymill
 */

define('PAYMILL_BRIDGE', 'https://bridge.paymill.com/');
define('PAYMILL_SERVER', 'https://api.paymill.de/v2/');
define('PAYMILL_MODE_TEST', 'test');
define('PAYMILL_MODE_LIVE', 'live');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paymill_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_paymill'] = array(
    'title' => t('Credit/debit card (via Paymill)'),
    'description' => t('Provides credit card payment during checkout via Paymill.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_settings_form().
 */
function commerce_paymill_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
	'test' => array(
	  'private_key' => '',
	  'public_key' => '',
	),
    'live' => array(
	  'private_key' => '',
	  'public_key' => '',
	),
    'mode' => PAYMILL_MODE_TEST,
  );

  $form[PAYMILL_MODE_TEST] = array(
    '#type' => 'fieldset',
    '#title' => t('Test keys'),
    '#collapsed' => FALSE,
  );
  $form[PAYMILL_MODE_TEST]['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private test key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[PAYMILL_MODE_TEST]['private_key'],
    '#required' => TRUE,
  );
  $form[PAYMILL_MODE_TEST]['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public test key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[PAYMILL_MODE_TEST]['public_key'],
    '#required' => TRUE,
  );

  $form[PAYMILL_MODE_LIVE] = array(
    '#type' => 'fieldset',
    '#title' => t('Live keys'),
    '#collapsed' => FALSE,
  );
  $form[PAYMILL_MODE_LIVE]['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private live key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[PAYMILL_MODE_LIVE]['private_key'],
  );
  $form[PAYMILL_MODE_LIVE]['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public test key'),
    '#size' => 40,
    '#maxlength' => 32,
    '#default_value' => $settings[PAYMILL_MODE_LIVE]['public_key'],
  );

  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#options' => array(
      PAYMILL_MODE_TEST => t('Test'),
      PAYMILL_MODE_LIVE => t('Live'),
    ),
    '#default_value' => $settings['mode'],
  );

  return $form;
}

/**
 * Implements hook_menu().
 */
function commerce_paymill_menu() {
  $items = array();

  $items['admin/settings/commerce-paymill'] = array(
    'title' => 'Commerce Paymill Configuration',
    'description' => 'Configure the Commerce Paymill module',
    'page callback' => 'commerce_paymill_configure',
    'access arguments' => array('administer payment methods'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Redirect user to configuration page.
 */
function commerce_paymill_configure() {
  // Redirect user to configuration page.
  drupal_goto('admin/commerce/config/payment-methods/manage/commerce_payment_commerce_paymill/edit/3');
}

/**
 * Payment method callback: submit form.
 */
function commerce_paymill_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  global $_commerce_paymill_settings;
  $_commerce_paymill_settings = $payment_method['settings'];

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $fields = array(
    'owner' => array(),
    'code' => array(),
  );
  $default = array();
  $form = commerce_payment_credit_card_form($fields, $default);

  // Render default form - will be inserted again using markup.
  $markup = drupal_render($form['credit_card']);

  // Create new form with no existing fields.
  $form['credit_card'] = array(
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_payment') . '/theme/commerce_payment.theme.css'),
    ),
  );

  // Add fields as markup (with name attributes removed for security).
  $form['credit_card']['fields'] = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );

  // Get order total for order.
  $commerce_order_total = field_get_items('commerce_order', $order, 'commerce_order_total');

  // Add hidden fields for amount/currency/Paymill token.
  $form['credit_card']['amount'] = array(
    '#type' => 'hidden',
    '#value' => sprintf('%.2f', $commerce_order_total[0]['amount'] / 100),
  );
  $form['credit_card']['currency'] = array(
    '#type' => 'hidden',
    '#value' => $commerce_order_total[0]['currency_code'],
  );
  $form['credit_card']['token'] = array(
    '#type' => 'hidden',
    '#required' => TRUE,
  );

  // Load Paymill bridge.
  $form['credit_card']['#after_build'] = array('commerce_paymill_loadjs');
  return $form;
}

/**
 * Load in javascript for payment form.
 */
function commerce_paymill_loadjs($element) {
  global $_commerce_paymill_settings;
  $key = commerce_paymill_get_key($_commerce_paymill_settings, 'public');
  $options = array('type' => 'external', 'scope' => 'footer');
  drupal_add_js(PAYMILL_BRIDGE, $options);
  $inline = "var PAYMILL_PUBLIC_KEY = '$key';\n";
  $inline .= sprintf("var PAYMILL_3DS_BUTTON_LABEL = '%s';", t('Cancel'));
  drupal_add_js($inline, 'inline');
  drupal_add_js(drupal_get_path('module', 'commerce_paymill') . '/commerce_paymill.js');
  return $element;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_paymill_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if (empty($pane_values['credit_card']['token'])) {
    form_set_error('', t('No Paymill token receieved. Your card has not been charged. Please enabled JavaScript to complete your payment.'));
    return FALSE;
  }

  // Include Paymill libraries.
  libraries_load('paymill');

  // Get order total for order.
  $commerce_order_total = field_get_items('commerce_order', $order, 'commerce_order_total');

  // Attempt transaction with Paymill.
  $params = array(
    'amount' => $commerce_order_total[0]['amount'],
    'currency' => $commerce_order_total[0]['currency_code'],
    'token' => $pane_values['credit_card']['token'],
    'description' => 'Test Transaction',
  );
  $api_key = commerce_paymill_get_key($payment_method['settings']);
  $transaction_service = new Services_Paymill_Transactions($api_key, PAYMILL_SERVER);
  $transaction = $transaction_service->create($params);

  // Need error checking for the transaction here!.
  if (isset($transaction['Error'])) {
    form_set_error('', $transaction['Error']);
    return FALSE;
  }
}

/**
 * Get Paymill key from settings.
 */
function commerce_paymill_get_key($settings, $key = 'private') {
  $mode = $settings['mode'];
  $key = $settings[$mode][$key . '_key'];
  return $key;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_paymill_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_paymill'] = $pane_values;

  commerce_paymill_transaction($payment_method, $order, $charge);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param payment_method $payment_method
 *   The payment method instance object used to charge this payment.
 * @param order $order
 *   The order object the payment applies to.
 * @param charge $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_paymill_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_paymill', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Name: @name';
  $transaction->message_variables = array('@name' => 'Kickstart example payment');

  commerce_payment_transaction_save($transaction);
  return $transaction;
}
